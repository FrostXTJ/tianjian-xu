{"ast":null,"code":"var _jsxFileName = \"/Users/tianjianxu/GitRepository/tianjian-xu/src/Homepage/Profolio/ProjectCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Card, Space, Tag } from \"antd\";\nimport ProjectDetail from \"./ProjectDetail\";\nimport \"./ProjectCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Meta = Card;\n\nconst ProjectCard = ({\n  coverSrc,\n  title,\n  description,\n  tags,\n  detail\n}) => {\n  _s();\n\n  const [isOverlayVisible, setIsOverlayVisible] = useState(false);\n\n  const handleOnClick = () => {\n    setIsOverlayVisible(true);\n  }; // Generate a random HTML color based on a given str as a key.\n  // The same key will yield the same color.\n\n\n  const generateRandomColor = str => {\n    let hash = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      const c = str.charCodeAt(i);\n      hash = (hash << 5) - hash + c;\n    }\n\n    const colorcode = \"#\" + Math.abs(Math.floor(hash * 890)).toString(16).substr(0, 6) + \"cf\";\n    return colorcode;\n  }; // Create a list of tag items given the project tag component list.\n\n\n  const makeTagComponents = (tagItemList, outList) => {\n    tagItemList.forEach((tagItem, index) => {\n      const colorcode = generateRandomColor(tagItem);\n      outList.push( /*#__PURE__*/_jsxDEV(Tag, {\n        color: colorcode,\n        children: tagItem\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this));\n    });\n  };\n\n  let tagComponents = [];\n  makeTagComponents(tags, tagComponents);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      hoverable: true,\n      cover: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"cover-image\",\n        src: coverSrc,\n        alt: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }, this),\n      onClick: handleOnClick,\n      children: /*#__PURE__*/_jsxDEV(Meta, {\n        title: title,\n        bordered: false,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"project-card-description\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"project-card-tags-wrapper\",\n          children: tagComponents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProjectDetail, {\n      isVisible: isOverlayVisible,\n      setIsVisible: setIsOverlayVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProjectCard, \"1tBCixl9wlDuvf9Jnk+Mow1blCE=\");\n\n_c = ProjectCard;\nexport default ProjectCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectCard\");","map":{"version":3,"sources":["/Users/tianjianxu/GitRepository/tianjian-xu/src/Homepage/Profolio/ProjectCard.js"],"names":["React","useState","Card","Space","Tag","ProjectDetail","Meta","ProjectCard","coverSrc","title","description","tags","detail","isOverlayVisible","setIsOverlayVisible","handleOnClick","generateRandomColor","str","hash","i","length","c","charCodeAt","colorcode","Math","abs","floor","toString","substr","makeTagComponents","tagItemList","outList","forEach","tagItem","index","push","tagComponents"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,QAAiC,MAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,mBAAP;;;AAEA,MAAMC,IAAI,GAAGJ,IAAb;;AAEA,MAAMK,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,WAAnB;AAAgCC,EAAAA,IAAhC;AAAsCC,EAAAA;AAAtC,CAAD,KAAoD;AAAA;;AACtE,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,KAAD,CAAxD;;AAEA,QAAMc,aAAa,GAAG,MAAM;AAC1BD,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GAFD,CAHsE,CAOtE;AACA;;;AACA,QAAME,mBAAmB,GAAGC,GAAG,IAAI;AACjC,QAAIC,IAAI,GAAG,CAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,YAAME,CAAC,GAAGJ,GAAG,CAACK,UAAJ,CAAeH,CAAf,CAAV;AACAD,MAAAA,IAAI,GAAG,CAACA,IAAI,IAAI,CAAT,IAAcA,IAAd,GAAqBG,CAA5B;AACD;;AACD,UAAME,SAAS,GAAG,MAAMC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWR,IAAI,GAAE,GAAjB,CAAT,EAAgCS,QAAhC,CAAyC,EAAzC,EAA6CC,MAA7C,CAAoD,CAApD,EAAuD,CAAvD,CAAN,GAAkE,IAApF;AACA,WAAOL,SAAP;AACD,GARD,CATsE,CAmBtE;;;AACA,QAAMM,iBAAiB,GAAG,CAACC,WAAD,EAAcC,OAAd,KAA0B;AAClDD,IAAAA,WAAW,CAACE,OAAZ,CAAoB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACtC,YAAMX,SAAS,GAAGP,mBAAmB,CAACiB,OAAD,CAArC;AACAF,MAAAA,OAAO,CAACI,IAAR,eACE,QAAC,GAAD;AAAiB,QAAA,KAAK,EAAEZ,SAAxB;AAAA,kBACGU;AADH,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAPD;AAQD,GATD;;AAWA,MAAIE,aAAa,GAAG,EAApB;AACAP,EAAAA,iBAAiB,CAAClB,IAAD,EAAOyB,aAAP,CAAjB;AAEA,sBACE;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,KAAK,eAAE;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,GAAG,EAAE5B,QAAlC;AAA4C,QAAA,GAAG,EAAEC;AAAjD;AAAA;AAAA;AAAA;AAAA,cAFT;AAGE,MAAA,OAAO,EAAEM,aAHX;AAAA,6BAKE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,KAAb;AAAoB,QAAA,QAAQ,EAAE,KAA9B;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC,0BAAb;AAAA,oBAAyCC;AAAzC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,2BAAf;AAAA,oBAA4C0B;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,aAAD;AACE,MAAA,SAAS,EAAEvB,gBADb;AAEE,MAAA,YAAY,EAAEC;AAFhB;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,kBADF;AAkBD,CApDD;;GAAMP,W;;KAAAA,W;AAsDN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Space, Tag } from \"antd\";\nimport ProjectDetail from \"./ProjectDetail\";\nimport \"./ProjectCard.css\";\n\nconst Meta = Card;\n\nconst ProjectCard = ({ coverSrc, title, description, tags, detail }) => {\n  const [isOverlayVisible, setIsOverlayVisible] = useState(false);\n\n  const handleOnClick = () => {\n    setIsOverlayVisible(true);\n  };\n\n  // Generate a random HTML color based on a given str as a key.\n  // The same key will yield the same color.\n  const generateRandomColor = str => {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const c = str.charCodeAt(i);\n      hash = (hash << 5) - hash + c;\n    }\n    const colorcode = \"#\" + Math.abs(Math.floor(hash *890)).toString(16).substr(0, 6) + \"cf\";\n    return colorcode;\n  };\n\n  // Create a list of tag items given the project tag component list.\n  const makeTagComponents = (tagItemList, outList) => {\n    tagItemList.forEach((tagItem, index) => {\n      const colorcode = generateRandomColor(tagItem);\n      outList.push(\n        <Tag key={index} color={colorcode}>\n          {tagItem}\n        </Tag>\n      );\n    });\n  };\n\n  let tagComponents = [];\n  makeTagComponents(tags, tagComponents);\n\n  return (\n    <>\n      <Card\n        hoverable\n        cover={<img className=\"cover-image\" src={coverSrc} alt={title} />}\n        onClick={handleOnClick}\n      >\n        <Meta title={title} bordered={false}>\n          <p className=\"project-card-description\">{description}</p>\n          <div className=\"project-card-tags-wrapper\">{tagComponents}</div>\n        </Meta>\n      </Card>\n      <ProjectDetail\n        isVisible={isOverlayVisible}\n        setIsVisible={setIsOverlayVisible}\n      />\n    </>\n  );\n};\n\nexport default ProjectCard;\n"]},"metadata":{},"sourceType":"module"}